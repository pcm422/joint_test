# .github/workflows/deploy.yml
name: Deploy to NCP Server

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile
          # target: production # 멀티 스테이지 빌드 사용 시
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/myproject:latest # Docker Hub 리포지토리명 수정

  deploy:
    name: Deploy to NCP Server
    needs: build-and-push # build-and-push 작업 완료 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # 배포 스크립트 등에 필요할 수 있음

      - name: Deploy to server and run migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_SERVER_HOST }}
          username: ${{ secrets.NCP_SERVER_USER }}
          # key: ${{ secrets.NCP_SERVER_SSH_KEY }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          script: |
            cd ${{ secrets.NCP_PROJECT_PATH }}

            # 서버용 환경 변수 파일 생성 (예시: 시크릿 사용)
            # 실제로는 서버에 미리 두거나 다른 안전한 방법 사용 권장
            echo "DATABASE_URL=${{ secrets.NCP_DB_URL }}" > .env.prod
            # 다른 필요한 환경 변수들도 추가...
            echo "PYTHONUNBUFFERED=1" >> .env.prod

            # Docker Hub 로그인 (서버에서 이미지 받기 위해)
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # 최신 설정 파일 가져오기 (예: git pull) - 선택사항
            # git pull origin main

            # 최신 Docker 이미지 받기
            docker compose -f docker-compose.prod.yml pull app

            # 서비스 재시작 (새 이미지로 교체)
            docker compose -f docker-compose.prod.yml up -d --force-recreate app nginx certbot

            # DB 마이그레이션 실행
            docker compose -f docker-compose.prod.yml run --rm app poetry run alembic upgrade head

            # 사용하지 않는 Docker 리소스 정리 (선택 사항)
            docker image prune -f
            docker container prune -f
            docker volume prune -f